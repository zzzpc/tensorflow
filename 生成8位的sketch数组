#define _CRT_SECURE_NO_WARNINGS
#pragma warning(disable : 4996)

#include "stdio.h"
#include <string>
#include "stdlib.h"
#include "math.h"
#include "time.h"
#include <iostream>
#include <io.h>
#include <algorithm>
#include<vector>
#include <fstream>
#include <string>
#include <thread>  
#include <windows.h>
using namespace std;



#include<iostream>
using namespace std;



typedef struct {
	int p[3];				//三个位 
	char c[3];
}Ent;
Ent NDB[60000];


typedef struct {
	int n0;
	int n1;
}Sum0_1;



Sum0_1  sum01[8000];
vector<Sum0_1>  vector_skecth_0[8];
vector<Sum0_1>  vector_skecth_1[8];

int  m, cn;
double r;
double p[4], q[9];
double posbility[9][2] = { 0 };
int Pos[9000][2] = { 0 };

int len;
#define K 3
const int L = 8;
#define CN 1000
#define LEN 256
double Q[CN][LEN];
double xq[CN];
double q0[10], q1[10];
int N0[9000];//第i个负数据库中第j个位为0的个数
int N1[9000];
double pow_b[9] = { 1,2,4,8,16,32,64,128,256 };
char binTraindata[8000];

double traindata[4000][1000];
int qsum[101];

int sumj = (int)(q[0] * 100 + 0.5);



double  diff(int i) {                  //计算每一位与原串不同的概率
	double Ndiff = 0;
	double Nsame = 0;
	for (int j = 1; j <= 3; j++) {
		Ndiff += j * p[j] * q[i];
	}
	for (int j = 1; j <= 3; j++) {
		Nsame += ((3 - j) * p[j]) / 8;
	}

	double Pdiff = 0;
	Pdiff = Ndiff / (Ndiff + Nsame);
	return Pdiff;

}

void init() {


	r = 6.5;
	p[0] = 0;
	p[1] = 0.95;
	p[2] = 0.02;
	p[3] = 1 - p[1] - p[2];


	q[0] = 0.125;
	q[1] = 0.125;
	q[2] = 0.125;
	q[3] = 0.125;
	q[4] = 0.125;
	q[5] = 0.125;
	q[6] = 0.125;
	q[7] = 0.125;


	for (int i = 0; i < 8; i++) {
		posbility[i][0] = diff(i);
		posbility[i][1] = 1 - posbility[i][0];
	}


	/*
	int tt = 0;
	for (int i = 0;i <= 100;i++)
	{
		if (i < sumj)
		{
			qsum[i] = tt;
		}
		else {
			tt++;
			sumj += (int)(q[tt] * 100 + 0.5);
			qsum[i] = tt;
		}
	}
	*/


}



int rand1(int n)
{
	//	return rand()%n;
	//retr(int)((double）rand() / RAND_MAX) * n;


	return 0 + (int)n * rand() / (RAND_MAX + 1);


}

double rand1()
{
	return (double)rand() / (RAND_MAX + 1.0);
}

int  generateRandomNumbers(double l)	//取了三个随机位 
{

	if (l < 0) return 0;
	else if (l < q[1]) return 1;
	else if (l < q[1] + q[2])return 2;
	else if (l < q[1] + q[2] + q[3])return 3;
	else if (l < q[1] + q[2] + q[3] + q[4])return 4;
	else if (l < q[1] + q[2] + q[3] + q[4] + q[5])return 5;
	else if (l < q[1] + q[2] + q[3] + q[4] + q[5] + q[6])return 6;
	else return 7;

}


void addToNDB(Ent x)		//负数据库确定位赋值 
{
	int i;
	for (i = 0; i < 3; i++)
	{
		NDB[cn].p[i] = x.p[i];
		NDB[cn].c[i] = x.c[i];
	}
	cn++;
}


void getBinData(double arr[], int length)
{
	for (int i = 0; i < length; i++)
	{
		int b = i * 8;

		double v = fabs(arr[i] - int(arr[i]));
		//if (arr[i] > 0)  binTraindata[b] = '0';
		//else    binTraindata[b] = '1';
		for (int k = 0; k < 8; k++)
		{
			v = v * 2;
			binTraindata[b + k] = int(v) + '0';
			v = v - int(v);
		}
	}

}





void f(char s[], int index)		//生成s[]的负数据库	
{
	Ent v;
	Sum0_1  sum01[8000];
	int n;
	double t;
	double u;
	m = 8000;

	len = m / 8;
	n = int(m * r + 0.5);


	int bit1 = 0;
	int bit2 = 0;
	int bit3 = 0;
	int attr1 = 0;
	int attr2 = 0;
	int attr3 = 0;

	//四舍五入 
	cn = 0;

	int counter = 0;
	do
	{
		//取3个随机位 
		t = rand1();				//生成0~1之间的小数 
		if (t < p[1])                 //生成类型一
		{

			u = rand1();
			v.p[0] = generateRandomNumbers(u) + rand1(len) * 8;      //生成的反转位
			v.c[0] = '1' + '0' - s[v.p[0]];


			bit2 = rand1(8);
			attr2 = rand1(len);

			while ((bit2 + attr2 * 8) == v.p[0]) {
				bit2 = rand1(8);
				//attr2 = rand1(m / 9);
				//counter++;
			}
			v.p[1] = bit2 + attr2 * 8;
			v.c[1] = s[v.p[1]];


			bit3 = rand1(8);
			attr3 = rand1(len);
			while ((bit3 + attr3 * 8) == v.p[0] || (bit3 + attr3 * 8) == v.p[1]) {
				bit3 = rand1(8);
				//attr3 = rand1(m / 9);
				//counter++;
			}
			v.p[2] = bit3 + attr3 * 8;
			v.c[2] = s[v.p[2]];


		}
		else if (t < p[1] + p[2])
		{



			v.p[0] = generateRandomNumbers(rand1()) + rand1(len) * 8;      //生成的反转位
			v.c[0] = '1' + '0' - s[v.p[0]];

			bit2 = generateRandomNumbers(rand1());
			attr2 = rand1(len);
			while ((bit2 + attr2 * 8) == v.p[0]) {
				//bit2 = generateRandomNumbers(rand1());
				attr2 = rand1(m / 8);
				//counter++;
			}
			v.p[1] = bit2 + attr2 * 8;
			v.c[1] = '1' + '0' - s[v.p[1]];

			attr3 = rand1(len);
			bit3 = rand1(8);
			while ((bit3 + attr3 * 8) == v.p[1] || (bit3 + attr3 * 8) == v.p[0]) {
				//bit3 = rand1(9);
				attr3 = rand1(m / 8);
				//counter++;
			}
			v.p[2] = bit3 + attr3 * 8;
			v.c[2] = s[v.p[2]];

		}
		else
		{



			v.p[0] = generateRandomNumbers(rand1()) + rand1(len) * 8;      //生成的反转位
			v.c[0] = '1' + '0' - s[v.p[0]];

			bit2 = generateRandomNumbers(rand1());
			attr2 = rand1(len);
			while ((bit2 + attr2 * 8) == v.p[0]) {
				//bit2 = generateRandomNumbers(rand1());
				attr2 = rand1(m / 8);
				//counter++;

			}
			v.p[1] = bit2 + attr2 * 8;      //生成的反转位
			v.c[1] = '1' + '0' - s[v.p[1]];

			bit3 = generateRandomNumbers(rand1());
			attr3 = rand1(len);

			while ((bit3 + attr3 * 8) == v.p[1] || (bit3 + attr3 * 8) == v.p[0]) {
				//bit3 = generateRandomNumbers(rand1());

				//counter++;
				attr3 = rand1(m / 8);

			}
			v.p[2] = bit3 + attr3 * 8;      //生成的反转位
			v.c[2] = '1' + '0' - s[v.p[2]];

		}

		addToNDB(v);		//负数据库确定位赋值 
	} while (cn < n);


}



void sketch_sum(char s[]) {


	int n;
	n = int(m * r + 0.5);
	for (int num = 0; num < n; num++)   //cn:NDB内串的个数
	{
		for (int j = 0; j < 3; j++) //统计每一位0和1的个数
		{
			int tmp = NDB[num].p[j];   //该负数据库记录第j位对应原始串的下标索引

			if (NDB[num].c[j] == '0') {
				sum01[tmp].n0++;

			}
			else {
				sum01[tmp].n1++;

			}

		}
	}
	for (int i = 0;i < m;i++) {
		if (s[i] == '0') {
			vector_skecth_0[i % 8].push_back(sum01[i]);

		}
		else {
			vector_skecth_1[i % 8].push_back(sum01[i]);

		}
	}
	memset(&sum01, 0, sizeof(sum01));
}



void calQ()
{

	int maxval = 255;
	for (int j = 0; j < len; ++j) {
		for (int k = 0; k < 256; ++k) {
			Q[j][k] = 0;
		}
	}

	//计算第i条数据第j个属性的第i位为0和为1 的概率

	for (int j = 0; j < len; j++) {
		int countpos = L * j ;
		for (int k = 0; k < 8; k++) {
			int id = countpos + k;
			double var1 = Pos[id][0] * log(posbility[k + 1][1] + 1e-7) + Pos[id][1] * log(posbility[k + 1][0] + 1e-7);
			double var2 = Pos[id][0] * log(posbility[k + 1][0] + 1e-7) + Pos[id][1] * log(posbility[k + 1][1] + 1e-7);
			q0[k] = var1 - log(exp(var1) + exp(var2) + 1e-7);
			q1[k] = var2 - log(exp(var1) + exp(var2) + 1e-7);
		}
		double sumv = 0;
		for (int a = 0; a <= maxval; a++) {
			int k = a;
			for (int b = 7; b >= 0; b--) {
				double tmp = pow_b[b];
				if (k >= tmp) {
					Q[j][a] = Q[j][a] + q1[7 - b];
					k = k - tmp;
				}
				else {
					Q[j][a] = Q[j][a] + q0[7 - b];
				}
			}
			sumv += exp(Q[j][a]);
		}
		for (int a = 0; a <= maxval; a++)
		{
			Q[j][a] = exp(Q[j][a]) / sumv;
		}
	}

	for (int j = 0; j < len; j++)
	{
		double s2 = 0;
		for (int x = 0; x <= 255; x++)
		{
			s2 += x * Q[j][x] / 255;
		}
		xq[j] = s2;
	}

}


int main() {
	srand((unsigned)(time(0)));
	double time_sum = 0;

	ifstream inFile;


	inFile.open("I:\\parameter.txt", ios::in);
	double tc;
	for (int i = 0; i < 100; i++)
	{
		for (int j = 0; j < 1000; j++)
		{
			if (inFile.eof())  break;
			inFile >> tc;
			traindata[i][j] = tc;

		}

	}
	inFile.close();



	for (int i = 0;i < 100;i++) {
		getBinData(traindata[i], 1000);
		init();
		f(binTraindata, i);
		sketch_sum(binTraindata);
		//calQ(i);
	}

	for (int i = 0;i < 8;i++) {
		cout << posbility[i][0] << " " << posbility[i][1] << endl;
	}
	ofstream   outfile;
	outfile.open("f0125_out_new.txt", ios::out);
	for (int i = 0;i < 8;i++) {
		for (int j = 0;j < vector_skecth_0[i].size();j++) {
			outfile << vector_skecth_0[i][j].n0 << " " << vector_skecth_0[i][j].n1 << " ";
		}
		outfile << endl;
		for (int j = 0;j < vector_skecth_1[i].size();j++) {
			outfile << vector_skecth_1[i][j].n0 << " " << vector_skecth_1[i][j].n1 << " ";
		}
		outfile << endl;
	}
	outfile.close();

	double weight_data[1000] = { 0.51588235408067703, -0.43099812589585781, 0.69372550576925278, -0.721359657645225525, 0.81921568766236305,
		-0.33313728213310242, 0.253926457837224007, -0.14294115245342255, 3.334213616312809e-08, 0.03137644752860069,
		0.054895445704460144, 0.0784313753247261, 1.6599473795508857e-08, 0.0941176488995552, 0.003921568859368563,
		7.245113010867499e-06, 0.0117647061124444, 0.11372549086809158, 0.0941166803240776, 0.0784313753247261,
		0.1882352977991104, 0.09019608050584793, 0.03921568766236305, 0.09411788731813431, 0.09803926199674606,
		0.10980388522148132, 0.007843718864023685, 0.1764705926179886, 0.0470588244497776, 0.11372549831867218,
		0.2313464730978012, 0.015685787424445152, 0.09019608050584793, 0.00784314051270485, 0.058736637234687805,
		0.03921572118997574, 0.003921590745449066, 0.02355549857020378, 0.0061004143208265305, 0.10588235408067703,
		0.007843137718737125, 0.0941176488995552, 0.047058869153261185, 0.13332948088645935, 0.09411823004484177,
		0.054901961237192154, 0.03930259123444557, 0.003921573515981436, 9.602026639077277e-12, 0.0588235929608345,
		0.125490203499794, 0.03311585262417793, 0.29411759972572327, 0.05882355570793152, 0.047045785933732986,
		0.06274514645338058, 0.12156862765550613, 0.08627451211214066, 0.004025987349450588, 0.2392156571149826,
		0.039223477244377136, 0.10980392247438431, 0.12941177189350128, 0.011765290051698685, 0.08236072212457657,
		0.054901961237192154, 6.531700364575954e-06, 0.003921568393707275, 0.027451233938336372, 0.02745096944272518,
		5.43756772941606e-09, 0.12156862765550613, 0.11372548341751099, 0.06275337934494019, 0.0941176488995552,
		0.0941917896270752, 0.20000000298023224, 0.06666667014360428, 0.03539843112230301, 0.007856196723878384,
		0.023522915318608284, 0.09019608050584793, 0.09412119537591934, 0.062745101749897, 0.33725491166114807,
		8.285523378503967e-10, 0.02353006601333618, 0.007847034372389317, 0.09803921729326248, 0.039215683937072754,
		0.003921568859368563, 0.1568627506494522, 0.0470588244497776, 0.04313727095723152, 0.015686284750699997,
		0.007843167521059513, 0.15294116735458374, 5.422900350993132e-09, 0.1254901885986328, 0.03921571001410484,
		0.0313725508749485, 0.0013902807841077447, 0.020152561366558075, 0.12941178679466248, 0.019607843831181526,
		0.0470588244497776, 0.03921583294868469, 0.1568632572889328, 0.0039215912111103535, 0.05490194633603096,
		0.047058865427970886, 0.011764707043766975, 0.04313725605607033, 0.07450980693101883, 0.07843472808599472,
		0.01960786059498787, 0.13720275461673737, 0.0627489909529686, 0.05882413312792778, 0.12156850099563599,
		0.08627451211214066, 0.1450980305671692, 0.00365311442874372, 0.1882352977991104, 0.08235294371843338,
		0.12156667560338974, 0.2078431397676468, 0.01176543440669775, 0.16078434884548187, 0.019611112773418427,
		0.03921568766236305, 0.035398416221141815, 0.019607843831181526, 0.027450961992144585, 0.04313783720135689,
		0.1332898885011673, 0.01181686483323574, 0.1224411353468895, 0.10196126997470856, 0.19607822597026825,
		0.07843166589736938, 0.0784308910369873, 0.07396664470434189, 0.01960783638060093, 0.03921597823500633,
		0.05098039284348488, 0.1097973957657814, 0.0117647061124444, 0.2823529541492462, 0.05098331347107887,
		0.0039281090721488, 0.05881049111485481, 0.21176421642303467, 0.05882352963089943, 4.474785782804247e-06,
		0.23137253522872925, 0.0235294122248888, 0.0862746313214302, 0.1294078677892685, 0.003929355647414923,
		0.16862791776657104, 0.043141137808561325, 0.043137259781360626, 0.019607897847890854, 0.0784313753247261,
		0.007843137718737125, 0.003921590279787779, 0.07451038807630539, 0.11764764040708542, 0.05882352963089943,
		0.12941177189350128, 0.17647051811218262, 0.22854019701480865, 0.0313725508749485, 0.0666731745004654,
		0.027450980618596077, 0.027451707050204277, 0.03137269243597984, 0.10980392247438431, 0.01568627543747425,
		0.2941175699234009, 0.027451053261756897, 0.003922542091459036, 0.03921569511294365, 0.10583890229463577,
		0.0313725508749485, 0.011765004135668278, 0.09019704908132553, 0.0392158105969429, 0.06666667014360428,
		0.0156862773001194, 0.01568634808063507, 0.26274511218070984, 0.06675343960523605, 0.09803921729326248,
		0.0666700005531311, 0.011764708906412125, 0.003921612165868282, 0.0235294122248888, 0.1215767040848732,
		0.03147684782743454, 0.10196087509393692, 0.09019637107849121, 0.1725485771894455, 0.003921705298125744,
		1.890595902054315e-09, 0.027450967580080032, 0.0470588356256485, 0.01960783451795578, 0.054901961237192154,
		0.05098038539290428, 0.0235294122248888, 0.12941178679466248, 0.08235245943069458, 0.06666652113199234,
		0.06274508684873581, 0.04313725605607033, 0.16078628599643707, 0.00784317497164011, 0.18430069088935852,
		0.03529411926865578, 0.1725492626428604, 0.24313725531101227, 0.031372617930173874, 0.2078431248664856,
		0.019607849419116974, 0.054901961237192154, 0.1059344932436943, 0.0470607727766037, 1.2219075529174006e-07,
		0.019607843831181526, 0.14901958405971527, 0.050982922315597534, 0.06666667014360428, 0.20392931997776031,
		0.13725504279136658, 0.11769932508468628, 0.06274513900279999, 0.031372543424367905, 0.05098039284348488,
		0.0156862735748291, 0.01568627543747425, 0.13333332538604736, 0.027451271191239357, 0.25882354378700256,
		0.027451055124402046, 0.062745101749897, 0.0117647061124444, 0.17649666965007782, 0.09803926199674606,
		0.005011013243347406, 0.12156865000724792, 0.003921642433851957, 0.11764702200889587, 0.13333334028720856,
		0.00784753356128931, 0.21960784494876862, 0.007843179628252983, 0.015688221901655197, 0.15686288475990295,
		0.12156859040260315, 0.03137580677866936, 0.0666731745004654, 0.0941176488995552, 0.09804247319698334,
		0.0470588281750679, 0.1764696091413498, 0.07843136042356491, 0.23137255012989044, 0.011764696799218655,
		0.00034762333962135017, 0.10196078568696976, 0.007843137718737125, 0.007843182422220707, 0.21176470816135406,
		0.027451271191239357, 0.21568627655506134, 1.4536362868966535e-07, 0.03137267008423805, 0.015686295926570892,
		0.09019607305526733, 0.06671881675720215, 2.578579767487099e-07, 0.007843137718737125, 0.035346195101737976,
		0.10196078568696976, 0.01177249290049076, 0.0235294122248888, 0.5098038911819458, 0.22745098173618317,
		0.3137776553630829, 0.6946629285812378, 0.05490196868777275, 0.21568623185157776, 0.42352935671806335,
		0.250980406999588, 0.2666661739349365, 0.08627480268478394, 0.0156862735748291, 0.37254902720451355,
		0.9921568632125854, 0.24313734471797943, 0.047084905207157135, 0.6901960968971252, 0.14509811997413635,
		0.5843136310577393, 0.21960756182670593, 0.30196067690849304, 0.7215686440467834, 0.4156862199306488,
		0.46666666865348816, 0.2705881595611572, 0.027450980618596077, 0.125490203499794, 0.01568627543747425,
		0.16862745583057404, 0.18039116263389587, 0.37254902720451355, 0.24705882370471954, 0.07843122631311417,
		0.062745101749897, 7.586590555774819e-08, 3.7237729344496984e-08, 0.0156862735748291, 0.0470588244497776,
		0.008190760388970375, 8.48508108219903e-09, 1.1497153451500708e-08, 0.015686344355344772, 0.0235294122248888,
		0.023529423400759697, 0.011764708906412125, 0.023529410362243652, 0.011764711700379848, 4.359553713584319e-07,
		0.007843264378607273, 1.8626281628186803e-09, 5.422730353643601e-08, 0.16078431904315948, 0.03922345116734505,
		0.0235295332968235, 0.0235294122248888, 0.003921568859368563, 0.019607843831181526, 0.019607843831181526,
		0.04313725605607033, 0.027450859546661377, 7.787122740410268e-06, 0.007843137718737125, 2.726861236812539e-10,
		0.04313774034380913, 2.6079835151904263e-05, 0.011764728464186192, 0.00392156932502985, 6.511717742796463e-08,
		0.0156872496008873, 0.039241764694452286, 0.003921913914382458, 1.467643923058759e-10, 0.007843137718737125,
		0.03529413416981697, 0.011764710769057274, 0.003921641502529383, 0.0156862735748291, 5.830636595760552e-08,
		7.798376827850007e-06, 0.003921641036868095, 0.050988178700208664, 0.019607843831181526, 0.027450982481241226,
		4.3447435018606484e-05, 0.007843142375349998, 8.626924175025863e-10, 0.0117647061124444, 0.003921568859368563,
		7.787145477777813e-06, 0.015685787424445152, 0.011763149872422218, 0.003921560011804104, 0.03921568766236305,
		0.003922055475413799, 0.003921665716916323, 0.019607864320278168, 0.0313725471496582, 0.04313725605607033,
		7.473523133683102e-09, 4.867051188739424e-07, 0.007846690714359283, 0.0313725508749485, 0.003921573981642723,
		2.7638105692950887e-10, 3.2605948945274577e-06, 0.0117647098377347, 0.019607864320278168, 0.019607849419116974,
		0.0117647061124444, 0.0117647061124444, 0.011764688417315483, 9.081922058840064e-08, 0.007843195460736752,
		4.350405546915681e-08, 5.784698497990348e-09, 0.0313725583255291, 0.03529413789510727, 0.03529411554336548,
		0.019608860835433006, 0.003921570722013712, 0.019607847556471825, 0.0117647061124444, 0.03529411926865578,
		0.019607843831181526, 2.9066282536405197e-07, 0.00392157444730401, 1.6515923562110402e-06, 0.027450980618596077,
		0.011765236034989357, 0.0117647061124444, 1.084913048288172e-09, 2.426114170672733e-11, 0.01568627543747425,
		0.02745092660188675, 0.003921590279787779, 8.985739236022638e-12, 0.021352345123887062, 0.0313725508749485,
		0.007844114676117897, 0.011764850467443466, 0.01568627543747425, 0.003921714145690203, 2.4335679427167634e-07,
		0.00392157444730401, 0.03921568766236305, 0.01568627543747425, 0.019607843831181526, 0.003922047559171915,
		0.0039214505814015865, 0.011769181117415428, 2.0627770602743567e-09, 0.003921573981642723,
		3.3227436357918805e-09, 0.011764463037252426, 0.015686284750699997, 0.003921568859368563, 0.027451012283563614,
		3.6341567977160594e-08, 0.003921568859368563, 0.011764707043766975, 0.02358156070113182, 0.08235683292150497,
		0.015686307102441788, 3.8935877455514856e-06, 0.0235294122248888, 0.07450980693101883, 0.007850926369428635,
		1.6264279922850733e-09, 5.903039550503308e-07, 0.02352970279753208, 0.03137262910604477, 0.01961175538599491,
		0.02352290228009224, 0.03529416024684906, 0.01176528725773096, 1.1211469974625743e-08, 0.007843137718737125,
		6.518667305499548e-06, 1.1306331426652605e-09, 0.043137285858392715, 0.050980404019355774, 0.027450982481241226,
		0.0313725508749485, 0.008016927167773247, 0.023528944700956345, 0.0313725508749485, 0.051417384296655655,
		0.03137313202023506, 0.003921612165868282, 0.011764727532863617, 0.003921612165868282, 0.0470588244497776,
		0.007843141444027424, 0.01176485139876604, 4.1758307922634685e-09, 1.5078386184086412e-07, 0.01568627543747425,
		0.05490196868777275, 0.003921863157302141, 4.27389595936134e-10, 0.007845088839530945, 0.04733117297291756,
		0.003921570256352425, 4.281192154259594e-12, 0.019633913412690163, 1.4670817449768947e-07,
		1.2165956775334053e-07, 1.6582983164425968e-07, 0.07451357692480087, 0.03921568766236305, 0.027454877272248268,
		0.007843137718737125, 0.0156862773001194, 0.00393460551276803, 0.01568662002682686, 0.007843137718737125,
		0.003921641502529383, 0.019607828930020332, 6.580099579878151e-06, 0.0117647061124444, 0.05490196496248245,
		0.015599455684423447, 0.003921568859368563, 0.02745112217962742, 0.04313725605607033, 0.04313807561993599,
		0.001390767516568303, 2.1909718270762824e-06, 0.007845086976885796, 0.03171919658780098, 0.007843139581382275,
		4.886419269212183e-09, 3.297904616061942e-09, 0.0078431386500597, 0.02352941781282425, 0.0235294122248888,
		0.011764727532863617, 0.01568627543747425, 0.01568632945418358, 2.4421928368489887e-10, 0.007844597101211548,
		8.72472583068884e-07, 2.0397145084061208e-10, 0.0313725471496582, 0.0431373193860054, 0.027477063238620758,
		0.019608497619628906, 0.00784313678741455, 0.015686336904764175, 0.003921568859368563, 0.03529442846775055,
		0.019607849419116974, 2.933778091573913e-07, 0.004025865811854601, 9.096567943345235e-09, 0.0313725620508194,
		0.007843137718737125, 0.011764353141188622, 3.2384463999335367e-09, 3.0560651231859026e-11,
		0.015686247497797012, 0.03137247636914253, 0.007843137718737125, 3.4706635343439984e-09, 0.007843159139156342,
		0.0313725508749485, 0.007843139581382275, 0.007843137718737125, 0.01568627543747425, 0.007843137718737125,
		4.750881354986802e-10, 0.003973862621933222, 0.03529416024684906, 0.007843265309929848, 0.0235294122248888,
		3.731557285391318e-09, 0.007843174040317535, 0.007843141444027424, 1.8975111260033373e-08,
		1.0957960233648478e-11, 4.503857198301375e-08, 0.007843718864023685, 0.019607843831181526, 0.003922150004655123,
		0.027450980618596077, 0.003921579569578171, 0.003922542091459036, 0.0117647061124444, 0.019607849419116974,
		0.0627489909529686, 0.011764707043766975, 2.193090686830601e-08, 0.011764705181121826, 0.054901961237192154,
		0.004269478842616081, 4.866955691795738e-07, 2.934162353085412e-07, 0.01568642072379589, 0.0274510458111763,
		0.0235295332968235, 0.031359512358903885, 0.031372591853141785, 0.003921573981642723, 5.867488539479382e-07,
		0.011765270493924618, 1.6405515834705398e-10, 2.5424684059471847e-12, 0.03921568766236305, 0.050980426371097565,
		0.02747705951333046, 0.02745049260556698, 0.0039346166886389256, 0.019607843831181526, 0.007843137718737125,
		0.05098068341612816, 0.01960786059498787, 0.003921719267964363, 0.003922055475413799, 3.658252865079703e-07,
		0.05098039284348488, 7.884164915594738e-06, 0.019608139991760254, 0.0117647061124444, 3.238024515184179e-09,
		0.015694305300712585, 0.04705230891704559, 0.007843137718737125, 2.8690711265100255e-11, 0.003921714145690203,
		0.03921568766236305, 0.007843174040317535, 2.1942128114460502e-08, 0.0156862735748291, 0.0117647061124444,
		0.00034761943970806897, 0.003921567928045988, 0.0470588244497776, 0.023637602105736732, 0.023529179394245148,
		0.003921605180948973, 0.027450984343886375, 0.003921605180948973, 0.01176479086279869, 0.009233490563929081,
		8.696529403096065e-05, 0.01568627543747425, 0.0117647061124444, 0.0078431386500597, 0.03529411554336548,
		2.453404701618922e-10, 0.003921568393707275, 0.02352941781282425, 0.03137247636914253, 0.054901961237192154,
		0.003921587020158768, 1.484059879430788e-07, 0.015686318278312683, 0.039219580590724945, 0.003921572118997574,
		1.125439474947143e-08, 4.581037060802373e-08, 0.008932320401072502, 0.0235294122248888, 0.02422456629574299,
		0.019607843831181526, 0.01960621401667595, 0.007843137718737125, 4.039992507198775e-10, 0.007846061140298843,
		0.00396502111107111, 2.763447628240101e-05, 0.035294126719236374, 0.04313729703426361, 0.03137257322669029,
		0.023537220433354378, 0.003921568859368563, 0.019608424976468086, 0.00784289464354515, 0.047066573053598404,
		0.019607843831181526, 0.003921626601368189, 0.0039215851575136185, 2.733710516622523e-06, 0.043137259781360626,
		0.003922850824892521, 0.011766674928367138, 0.015686318278312683, 2.600203252711708e-08, 0.01568627543747425,
		0.03529415279626846, 0.0078431386500597, 1.4347338606057747e-07, 0.003921570256352425, 0.035294122993946075,
		0.00784314051270485, 0.003923516720533371, 0.01176860835403204, 0.011777742765843868, 4.127929997821411e-09,
		0.003922150004655123, 0.04313725605607033, 0.019607843831181526, 0.023529423400759697, 3.089419345347899e-11,
		0.020998114719986916, 6.070440261574106e-10, 0.007843718864023685, 0.007843137718737125, 7.541937629973461e-10,
		0.01568627543747425, 0.0117647061124444, 0.011764707043766975, 0.03137312829494476, 2.423118650174416e-10,
		0.003921578638255596, 0.019607843831181526, 0.023531116545200348, 0.05492808297276497, 0.007843137718737125,
		4.890096150234058e-08, 0.015686282888054848, 0.0470588244497776, 0.011777742765843868, 1.4992357932896994e-07,
		7.275183122601447e-08, 0.019607845693826675, 0.027450980618596077, 0.0313725583255291, 0.019607841968536377,
		0.03529462590813637, 0.003921606112271547, 2.5433456585233216e-07, 0.003921626601368189, 2.685691242731991e-07,
		4.4884195915528835e-08, 0.03529440984129906, 0.0470588244497776, 0.01568627543747425, 0.027450991794466972,
		0.003922150004655123, 0.019606225192546844, 0.011761448346078396, 0.043137237429618835, 0.027452927082777023,
		6.518562713608844e-06, 0.00785092730075121, 0.0014166041510179639, 0.0470588244497776, 0.003921662922948599,
		0.015686294063925743, 0.011764708906412125, 7.267634032359638e-07, 0.019607845693826675, 0.03921568766236305,
		0.0117647061124444, 4.048218670504866e-06, 0.00784316472709179, 0.0313725620508194, 0.0117647061124444,
		2.630539119863329e-10, 0.01585354283452034, 0.007843137718737125, 2.1694074092692972e-08, 6.591447345272172e-06,
		0.043132148683071136, 0.019607843831181526, 0.02747764065861702, 0.003921605180948973, 0.019607864320278168,
		0.0006967722438275814, 0.0156862735748291, 0.007843137718737125, 2.7617166331594944e-09, 0.011492363177239895,
		0.0117647061124444, 0.003922055475413799, 0.03529415279626846, 0.003921612165868282, 0.003921570722013712,
		0.02745487354695797, 0.027450982481241226, 0.08235294371843338, 0.003921560011804104, 1.3602324822059586e-09,
		0.0274493508040905, 0.062745101749897, 1.7603319912851134e-09, 5.868070047654328e-07, 5.665990787662167e-09,
		0.016381418332457542, 0.027450980618596077, 0.011764708906412125, 0.019607843831181526, 0.020998124033212662,
		0.01568627543747425, 8.316355937232345e-11, 0.007843210361897945, 2.7552942566400063e-11, 6.039729272266925e-10,
		0.031372543424367905, 0.039215441793203354, 0.04313832148909569, 0.02745097689330578, 0.023529421538114548,
		0.035294122993946075, 0.02745099365711212, 0.04313725605607033, 0.031372856348752975, 2.2396902110699557e-08,
		0.0039215595461428165, 0.007843137718737125, 0.04313740134239197, 8.25811641291807e-11, 0.0039215716533362865,
		0.01568724773824215, 3.3398075061086274e-07, 0.01176470797508955, 0.054901961237192154, 4.175267076522715e-10,
		1.4917269197667338e-08, 0.0039215595461428165, 0.05098067224025726, 0.00392359122633934, 8.663817580023547e-11,
		0.027450496330857277, 3.899010607710807e-06, 1.4535436321239104e-07, 0.0039215730503201485, 0.07058823853731155,
		0.035398416221141815, 0.023529376834630966, 0.0021788489539176226, 0.011764704249799252, 0.003921572118997574,
		3.1015037649240185e-08, 0.013154866173863411, 0.0039215716533362865, 0.023529408499598503, 0.003921590279787779,
		0.007843283005058765, 0.03921572491526604, 0.027450494468212128, 0.003929378930479288, 0.015686292201280594,
		0.050980404019355774, 0.06666506081819534, 0.003921590279787779, 1.9560588953027036e-06, 0.019608134403824806,
		0.05098039284348488, 0.007843137718737125, 4.3381508163520266e-08, 3.409004856180786e-09, 0.019607841968536377,
		0.0235294122248888, 0.01960780657827854, 0.0235294122248888, 0.02352922223508358, 0.0117647061124444,
		1.0157065466476212e-10, 0.009804503060877323, 0.003921569790691137, 2.166321788621417e-09, 0.03529415652155876,
		0.04313727840781212, 0.0313725508749485, 0.0235294196754694, 0.003922542091459036, 0.023529408499598503,
		0.011764995753765106, 0.04705881327390671, 0.02352999337017536, 0.003922151401638985, 0.003921590279787779,
		8.109671267853003e-10, 0.04313726723194122, 2.0336629802386597e-07, 0.011791554279625416, 0.015688221901655197,
		6.512186701002065e-08, 0.01568634808063507, 0.04313783720135689, 0.007843146100640297, 2.512089425366071e-10,
		0.00394764868542552, 0.03922347351908684, 0.007850924506783485, 2.930990519733889e-11, 0.01568627543747425,
		0.007843137718737125, 1.218104159761424e-07, 0.003921590279787779, 0.05098038539290428, 0.02745102532207966,
		0.02363399975001812, 0.003649220336228609, 0.019607843831181526, 0.003921612165868282, 0.007843137718737125,
		0.007843137718737125, 2.4297490686109313e-09, 0.019607843831181526, 0.007843145169317722, 0.011764779686927795,
		0.03137287497520447, 0.003921571187674999, 0.003921570256352425, 0.019607843831181526, 0.03529411926865578,
		0.10196153074502945, 0.015686284750699997, 7.091339737641533e-10, 0.0235294122248888, 0.07847540080547333,
		0.003921572118997574, 2.9062550765956985e-07, 1.92864102466217e-09, 0.02762472815811634, 0.03137291595339775,
		0.011764696799218655, 0.02745102345943451, 0.03921568766236305, 0.01568685658276081, 1.0983362663807839e-08,
		0.007843137718737125, 2.4606632109680504e-07, 1.8115285313480278e-11, 0.03921675682067871, 0.03921763226389885,
		0.03138033673167229, 0.027451561763882637, 0.027450982481241226, 0.03534533083438873, 0.03137602657079697,
		0.05490974709391594, 0.035294726490974426, 1.6704301231129648e-07, 0.007843137718737125, 0.01176474243402481,
		0.06684093922376633, 0.011895119212567806, 0.003921568859368563, 0.019659992307424545, 2.610176488815341e-05,
		0.0117647061124444, 0.06631933897733688, 8.262465378550132e-09, 4.502659578520252e-08, 0.003921568859368563,
		0.047058846801519394, 0.007843137718737125, 0.011764708906412125, 0.019607841968536377, 8.154558694961622e-10,
		1.1367648142246445e-11, 0.00784328393638134, 0.08235131949186325, 0.047080546617507935, 0.027450986206531525,
		0.0117650693282485, 0.027451608330011368, 0.007843283005058765, 0.0117647061124444, 0.01933550089597702,
		0.003921612165868282, 0.023529374971985817, 0.019608430564403534, 0.0117647061124444, 0.05098043382167816,
		0.027451463043689728, 0.003921573515981436, 0.0235294122248888, 0.05882367864251137, 0.09803979843854904,
		0.01568627543747425, 2.310657976067887e-08, 0.0235294122248888, 0.09019608050584793, 0.007843191735446453,
		3.633446254980299e-08, 9.319262028739672e-10, 0.031372591853141785, 0.0313725508749485, 0.015686383470892906,
		0.03529404476284981, 0.03921568766236305, 0.01568627543747425, 0.12549027800559998, 0.0117647061124444,
		2.7132933677620485e-09, 1.2176203654234996e-06, 0.03921568766236305, 0.050980404019355774, 0.03529426455497742,
		0.0274493508040905, 0.01963392272591591, 0.03529737889766693, 0.03137267008423805, 0.05490226298570633,
		0.03529314696788788, 1.0951334061815032e-08, 0.007842893712222576, 0.004008461255580187, 0.05490172654390335,
		0.007843182422220707, 0.007843137718737125, 0.011764696799218655, 1.1081596973383512e-08, 0.015686344355344772,
		0.06666667014360428, 0.003921573981642723, 8.137578944023005e-10, 0.003921582363545895 };


	clock_t  start_time = clock();
	for (int j = 0; j < 3000;j++) {
		getBinData(weight_data, 1000);
		for (int i = 0;i < 8000;i++) {
			int tmp = i % 8;
			if (binTraindata[i] == '0') {
				int rand = rand1() * vector_skecth_0[tmp].size();
				Pos[i][0] = vector_skecth_0[tmp][rand].n0;
				Pos[i][1] = vector_skecth_0[tmp][rand].n1;
			}
			else {
				int rand = rand1() * vector_skecth_1[tmp].size();
				Pos[i][0] = vector_skecth_1[tmp][rand].n0;
				Pos[i][1] = vector_skecth_1[tmp][rand].n1;
			}
		}


		calQ();

		//for (int i = 0;i < 1000;i++) {
		//	if (binTraindata[i * 9] == '0')
		//		cout << xq[i] << endl;
		//	else
		//		cout << -xq[i] << endl;
		//}
	}
	clock_t  end_time = clock();
	cout << double(end_time - start_time) / CLOCKS_PER_SEC;


}
